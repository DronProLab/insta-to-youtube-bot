import telebot
import yt_dlp
import os
import sys
import schedule
import time
import logging
import threading
import json
import re
from datetime import datetime, timedelta
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from auth import authenticate_youtube
from googleapiclient.http import MediaFileUpload

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="logs.txt", level=logging.ERROR, format="%(asctime)s - %(levelname)s - %(message)s")

# üîπ API-–∫–ª—é—á
TELEGRAM_BOT_TOKEN = "7676882544:AAE4-P6myPOjqrV_HSgnmtC3FJAhwWFsMJc"
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# üîπ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 5868926146  

# üîπ –õ–∏–º–∏—Ç—ã
MAX_QUEUE_SIZE = 50  
DAILY_UPLOAD_LIMIT = 10  

# üîπ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
QUEUE_FILE = "queue.json"
video_queue = []

# üîπ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏
def save_queue():
    try:
        with open(QUEUE_FILE, "w") as f:
            json.dump(video_queue, f, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")

def load_queue():
    global video_queue
    try:
        if os.path.exists(QUEUE_FILE):
            with open(QUEUE_FILE, "r") as f:
                video_queue = json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_queue()

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"), KeyboardButton("üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å"))

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º YouTube API
youtube = authenticate_youtube()

# üîπ –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
def download_instagram_video(url):
    save_path = "downloads"
    if not os.path.exists(save_path):
        os.makedirs(save_path)

    options = {
        "outtmpl": f"{save_path}/%(title)s.%(ext)s",
        "quiet": True,
        "format": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best[ext=webm]",
        "merge_output_format": "mp4",
    }

    try:
        with yt_dlp.YoutubeDL(options) as ydl:
            info = ydl.extract_info(url, download=True)
            video_path = ydl.prepare_filename(info)
            description = info.get("description", "")
        return video_path, description
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        return None, None

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
def upload_to_youtube(video_path, title, description):
    try:
        request = youtube.videos().insert(
            part="snippet,status",
            body={
                "snippet": {
                    "title": title,
                    "description": description,
                    "tags": ["shorts", "–∏–Ω—Å—Ç–∞–≥—Ä–∞–º", "short"],
                    "categoryId": "22",
                },
                "status": {"privacyStatus": "public"},
            },
            media_body=MediaFileUpload(video_path, chunksize=-1, resumable=True)
        )
        response = request.execute()
        return response["id"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return None

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
def process_queue():
    if video_queue:
        chat_id, video_path, description = video_queue.pop(0)
        save_queue()
        title = "–í–∏–¥–µ–æ —Å Instagram"
        try:
            video_id = upload_to_youtube(video_path, title, description)
            if video_id:
                bot.send_message(chat_id, f"üé• –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: https://www.youtube.com/watch?v={video_id}")

                if os.path.exists(video_path):
                    os.remove(video_path)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=["text"])
def handle_message(message):
    text = message.text.strip()

    # üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ Instagram
    instagram_pattern = r"(https?:\/\/)?(www\.)?(instagram\.com\/\S+)"
    match = re.search(instagram_pattern, text)

    if match:
        if len(video_queue) >= MAX_QUEUE_SIZE:
            bot.send_message(message.chat.id, "‚ö† –û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!", reply_markup=keyboard)
            return

        bot.send_message(message.chat.id, "üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...", reply_markup=keyboard)
        video_path, description = download_instagram_video(match.group(0))

        if video_path:
            video_queue.append((message.chat.id, video_path, description))
            save_queue()
            bot.send_message(message.chat.id, "‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!", reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.", reply_markup=keyboard)

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    elif text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
        now = datetime.now()
        next_upload_time = datetime.combine(now.date(), datetime.strptime("10:00", "%H:%M").time())

        if now > next_upload_time:
            next_upload_time += timedelta(days=1)

        time_remaining = next_upload_time - now
        hours, remainder = divmod(time_remaining.seconds, 3600)
        minutes, _ = divmod(remainder, 60)

        if not video_queue:
            bot.send_message(message.chat.id, f"üé¨ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.\n‚è≥ –î–æ –∑–∞–≥—Ä—É–∑–∫–∏: {hours} —á {minutes} –º–∏–Ω", reply_markup=keyboard)
        else:
            queue_info = f"üìå –í –æ—á–µ—Ä–µ–¥–∏ {len(video_queue)} –≤–∏–¥–µ–æ (–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è {min(len(video_queue), DAILY_UPLOAD_LIMIT)}):\n"
            for idx, (_, video_path, _) in enumerate(video_queue[:10], 1):
                queue_info += f"{idx}. {video_path.split('/')[-1]}\n"

            queue_info += f"\n‚è≥ –î–æ –∑–∞–≥—Ä—É–∑–∫–∏: {hours} —á {minutes} –º–∏–Ω"
            bot.send_message(message.chat.id, queue_info, reply_markup=keyboard)

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å"
    elif text == "üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å":
        if not video_queue:
            bot.send_message(message.chat.id, "‚ö† –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, "üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –≤–∏–¥–µ–æ...", reply_markup=keyboard)
            while video_queue:
                process_queue()
                time.sleep(5)
            bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!", reply_markup=keyboard)

# üîπ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ (–¥–æ 10 –≤ –¥–µ–Ω—å)
def scheduled_upload():
    videos_to_upload = min(len(video_queue), DAILY_UPLOAD_LIMIT)
    for _ in range(videos_to_upload):
        process_queue()

schedule.every().day.at("10:00").do(scheduled_upload)

# üîπ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(60)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    threading.Thread(target=run_schedule, daemon=True).start()
    bot.polling(none_stop=True)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
    bot.send_message(ADMIN_ID, f"‚ùå –ë–æ—Ç —É–ø–∞–ª: {e}")
    os.execv(sys.executable, ['python'] + sys.argv)
